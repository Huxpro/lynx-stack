// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type CSSScopeVisitorConfig = {
  /**
   * @public
   */
  mode: 'all' | 'none' | 'modules';
  /**
   * @public
   */
  filename: string;
};

export type DefineDCEVisitorConfig = {
  /**
   * @public
   */
  define: Record<string, string>;
};

export type DirectiveDCEVisitorConfig = {
  /**
   * @internal
   */
  target: 'LEPUS' | 'JS' | 'MIXED';
};

export type DynamicImportVisitorConfig = {
  /**
   * @internal
   */
  runtimePkg: string;
  /**
   * @internal
   */
  layer: string;
};

export type InjectVisitorConfig = {
  inject: Record<
    string,
    ['expr', string] | ['importDefault', string] | ['importStarAs', string] | ['importNamed', string, string]
  >;
};

export type JSXTransformerConfig = {
  preserveJsx: boolean;
  runtimePkg: string;
  jsxImportSource?: string;
  filename: string;
  /**
   * @internal
   */
  target: 'LEPUS' | 'JS' | 'MIXED';
  /**
   * @internal
   */
  isDynamicComponent?: boolean;
};

export type ShakeVisitorConfig = {
  /**
   * @public
   */
  pkgName: Array<string>;
  /**
   * @public
   */
  retainProp: Array<string>;
  /**
   * @public
   */
  removeCallParams: Array<string>;
};

export type TransformNodiffOptions = {
  /**
   * @internal
   * This is used internally to make sure the test output is consistent.
   */
  mode?: 'production' | 'development' | 'test';
  filename: string;
  cssScope: boolean | CSSScopeVisitorConfig;
  snapshot?: boolean | JSXTransformerConfig;
  shake: boolean | ShakeVisitorConfig;
  defineDCE: boolean | DefineDCEVisitorConfig;
  directiveDCE: boolean | DirectiveDCEVisitorConfig;
  worklet: boolean | WorkletVisitorConfig;
  dynamicImport?: boolean | DynamicImportVisitorConfig;
  /**
   * @internal
   */
  inject?: boolean | InjectVisitorConfig;
};

export type WorkletVisitorConfig = {
  /**
   * @public
   * During the compilation of worklet, when extracting external variable identifiers,
   * global identifiers available in lepus context need to be ignored.
   * In addition to the default lepus global identifier list provided by the compiler,
   * users can customize the global identifier list through this option.
   * This configuration will take effect together with the default lepus global identifier list.
   */
  customGlobalIdentNames?: Array<string>;
  /**
   * @internal
   */
  filename: string;
  /**
   * @internal
   */
  target: 'LEPUS' | 'JS' | 'MIXED';
  runtimePkg: string;
};
